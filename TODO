This file contains suggestions for further work.
Feel free to edit the wiki at http://trac.common-lisp.net/clfswm/wiki
if you want something in clfswm.


URGENT PROBLEMS
===============
Should handle these soon.

- Factorize layout

- A Gimp layout example (a main window and all others on the left) [Philippe]
  + Alt-Tab cycle only on non-main windows
  + Focus policy to sloppy focus.

- Hook to open next window in named/numbered frame [Philippe]

- Ensure-unique-number/name (new function) [Philippe]

- Show config -> list and display documentation for all tweakable global variables. [Philippe]
   A finir : remove src/test.lisp src/load-test.lisp
   Dans ~/.clfswmrc:
      ;;;; AUTO-CONFIG - Do not edit those lines by hands: they are overwritten by CLFSWM
      (defparameter *ma-var* value)
      ...
      ;;;; AUTO-CONFIG End : You can add your configurations below this line.

- Focus policy by frame


MAYBE
=====

- cd/pwd a la shell to navigate throw frames. [Philippe]

- From stumpwm: [Philippe]
 "In other news stumpwm should catch unhandled errors, restart, and
 print an error message. And there is now a soft-restart command. With
 this in place I suspect you will need to restart stumpwm very rarely
 and it won't spontaneously bring down X."
  => Reset all -> place clfswm in its starting state.


- Zoom

Concept:
  * zoom out: Behave as if the application window is bigger for the application but completely drawn in a small amount of space (miniature). The zoom factor is inferior to 100%
  * zoom in: Behave as a magnifying glass. The zoom factor is superior to 100%. The part of the application window shown (viewport) can be moved.

Operation:
  * set-zoom-factor (frame, factor)
  * move-viewport (frame &optional (increment 1))
    * left
    * right
    * up
    * down

- Undo/redo (any idea to implement this is welcome)

- Mouse support in menu?

- Remote access to the clfswm REPL [Philippe]
   Protocol:  Server: Ask: random-number
              Client: Reply: associated random-number
              Server: Ok
              Client: a lisp form (+ 2 2)
              ...
   Random-number a compile time: '((rnd-1-server rnd-1-client) (rnd-1-server rnd-1-client) (rnd-1-server rnd-1-client) ...)
