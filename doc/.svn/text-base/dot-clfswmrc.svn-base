;;; -*- lisp -*-
;;;
;;; CLFSWM configuration file example
;;;
;;; Send me your configuration file at hocwp _at_ free -dot- fr if
;;; you want to share it with others.

(in-package :clfswm)


;;;; Uncomment the line above if you want to enable the notify event compression.
;;;; This variable may be useful to speed up some slow version of CLX
;;;; It is particulary useful with CLISP/MIT-CLX.
;; (setf *have-to-compress-notify* t)


;;; Color configuration example
;;;
;;; See in package.lisp for all variables
(setf *color-unselected* "Blue")


;;(defparameter *fullscreen* '(0 4 800 570))
(defparameter *fullscreen* '(0 0 1024 750))



;;; Binding example: Undefine Control-F1 and define  Control-F5 as a
;;; new binding in main mode
;;;
;;; See bindings.lisp, bindings-second-mode.lisp and bindings-pager.lisp
;;; for all default bindings definitions.
(undefine-main-key ("F1" :mod-1))
(define-main-key ("F5" :mod-1) 'help-on-clfswm)



;;; Binding example for apwal
(define-second-key (#\Space)
    (defun tpm-apwal ()
      "Run Apwal"
      (do-shell "exec apwal")
      (show-all-windows-in-workspace (current-workspace))
      (throw 'exit-second-loop nil)))





;;;; Reloading example
(defun reload-clfswm ()
  "Reload clfswm"
  (format t "RELOADING... ")
  (ungrab-main-keys)
  (setf *main-keys* (make-hash-table :test 'equal))
  (asdf:oos 'asdf:load-op :clfswm)
  (grab-main-keys)
  (format t "Done!~%"))


(define-main-key ("F2" :mod-1) 'reload-clfswm)

(define-main-key ("F3" :mod-1) (lambda ()
				 (do-shell "rxvt")))



;;; Hook example
;;;
;;; See in package.lisp and clfswm.lisp, clfswm-second-mode.lisp
;;; or clfswm-pager.lisp for hook examples
(setf *key-press-hook* (list (lambda (&rest args) ; function 1
			       (format t "Keyp press (before): ~A~%" args)
			       (force-output))
			     #'handle-key-press	; function 2 (default)
			     (lambda (&rest args) ; function 3
			       (declare (ignore args))
			       (format t "Keyp press (after)~%")
			       (force-output))))



;;; A more complex example I use to record my desktop and show
;;; documentation associated to each key press.
(defun documentation-key-from-code (hash-key code state)
  (labels ((doc-from (key)
	     (multiple-value-bind (function foundp)
		 (gethash (list key state) hash-key)
	       (when (and foundp (first function))
		 (documentation (first function) 'function))))
	   (from-code ()
	     (doc-from code))
	   (from-char ()
	     (let ((char (keycode->char code state)))
	       (doc-from char)))
	   (from-string ()
	     (let ((string (keysym->keysym-name (keycode->keysym *display* code 0))))
	       (doc-from string))))
    (cond ((from-code))
	  ((from-char))
	  ((from-string)))))


(defun key-string (hash-key code state)
  (let* ((modifiers (make-state-keys state))
	 (keysym (keysym->keysym-name (keycode->keysym *display* code 0)))
	 (doc (documentation-key-from-code hash-key code state)))
    (values (format nil "~:(~{~A+~}~A~) : ~S" modifiers keysym doc)
	    doc)))

(defun display-doc (hash-key code state)
  (multiple-value-bind (str doc)
      (key-string hash-key code state)
    (when doc
      (do-shell "pkill osd_cat")
      (do-shell (format nil "echo ~A | osd_cat -d 3 -p bottom -o -45 -f -*-fixed-*-*-*-*-12-*-*-*-*-*-*-1" str))
      (force-output))))

(defun display-key-osd-main (&rest event-slots &key code state &allow-other-keys)
  (display-doc *main-keys* code state))

(defun display-key-osd-second (&rest event-slots &key code state &allow-other-keys)
  (display-doc *second-keys* code state))

(defun display-key-pager (&rest event-slots &key code state &allow-other-keys)
  (setf (gcontext-background *pager-gc*) (get-color "Black"))
  (setf (gcontext-foreground *pager-gc*) (get-color "Red"))
  (multiple-value-bind (str doc)
      (key-string *pager-keys* code state)
    (when doc
      (draw-image-glyphs *pager-window* *pager-gc* 20 570
			 (format nil "~A                                                  " str)))
    (display-finish-output *display*)))

;; Define new hook or add to precedent one
(if (consp *key-press-hook*)
    (push #'display-key-osd-main *key-press-hook*)
    (setf *key-press-hook* (list #'display-key-osd-main #'handle-key-press)))
(setf *sm-key-press-hook* (list #'display-key-osd-second #'sm-handle-key-press))
(setf *pager-key-press-hook* (list #'pager-handle-key-press #'display-key-pager))

;;; -- Doc example end --



;;;; Uncomment the lines below if you want to enable the larswm,
;;;; dwm, wmii... cycling style.
;;;;
;;;; This leave the main window in one side of the screen and tile others
;;;; on the other side. It can be configured in the rc file or interactively
;;;; with the function 'reconfigure-tile-workspace'.
;;;;
(defun circulate-group-up ()
  "Circulate up in group - larswm, dwm, wmii style"
  (banish-pointer)
  (minimize-group (current-group))
  (no-focus)
  (setf (workspace-group-list (current-workspace))
	(rotate-list (workspace-group-list (current-workspace))))
  (funcall *tile-workspace-function* (current-workspace))
  (show-all-windows-in-workspace (current-workspace)))

(defun circulate-group-down ()
  "Circulate down in group - larswm, dwm, wmii style"
  (banish-pointer)
  (minimize-group (current-group))
  (no-focus)
  (setf (workspace-group-list (current-workspace))
	(anti-rotate-list (workspace-group-list (current-workspace))))
  (funcall *tile-workspace-function* (current-workspace))
  (show-all-windows-in-workspace (current-workspace)))

;;; -- Lasrwm style end --



;;; Azerty keyboard configuration (first remove keys, then rebind)
;; Main mode
;;(undefine-main-key (#\t :mod-1))
;;(undefine-main-key (#\b :mod-1))
;;(undefine-main-key (#\b :mod-1 :control))
;;(undefine-main-key ("1" :mod-1))
;;(undefine-main-key ("2" :mod-1))
;;(undefine-main-key ("3" :mod-1))
;;(undefine-main-key ("4" :mod-1))
;;(undefine-main-key ("5" :mod-1))
;;(undefine-main-key ("6" :mod-1))
;;(undefine-main-key ("7" :mod-1))
;;(undefine-main-key ("8" :mod-1))
;;(undefine-main-key ("9" :mod-1))
;;(undefine-main-key ("0" :mod-1))
;; Or better:
(undefine-main-multi-keys (#\t :mod-1) (#\b :mod-1) (#\b :mod-1 :control)
			  (#\1 :mod-1) (#\2 :mod-1) (#\3 :mod-1)
			  (#\4 :mod-1) (#\5 :mod-1) (#\6 :mod-1)
			  (#\7 :mod-1) (#\8 :mod-1) (#\9 :mod-1) (#\0 :mod-1))

(define-main-key (#\< :control) 'second-key-mode)

(define-main-key ("twosuperior") 'banish-pointer)
(define-main-key ("twosuperior" :mod-1) 'toggle-maximize-current-group)

(define-main-key ("ampersand" :mod-1) 'b-main-focus-workspace-1)
(define-main-key ("eacute" :mod-1) 'b-main-focus-workspace-2)
(define-main-key ("quotedbl" :mod-1) 'b-main-focus-workspace-3)
(define-main-key ("quoteright" :mod-1) 'b-main-focus-workspace-4)
(define-main-key ("parenleft" :mod-1) 'b-main-focus-workspace-5)
(define-main-key ("minus" :mod-1) 'b-main-focus-workspace-6)
(define-main-key ("egrave" :mod-1) 'b-main-focus-workspace-7)
(define-main-key ("underscore" :mod-1) 'b-main-focus-workspace-8)
(define-main-key ("ccedilla" :mod-1) 'b-main-focus-workspace-9)
(define-main-key ("agrave" :mod-1) 'b-main-focus-workspace-10)

;; Second mode
(undefine-second-multi-keys (#\t) (#\b) (#\b :mod-1)
			    (#\1 :mod-1) (#\2 :mod-1) (#\3 :mod-1)
			    (#\4 :mod-1) (#\5 :mod-1) (#\6 :mod-1)
			    (#\7 :mod-1) (#\8 :mod-1) (#\9 :mod-1) (#\0 :mod-1)
			    (#\1 :control :mod-1) (#\2 :control :mod-1))

(define-second-key (#\<) 'leave-second-mode-maximize)


(define-second-key ("ampersand" :mod-1) 'b-second-focus-workspace-1)
(define-second-key ("eacute" :mod-1) 'b-second-focus-workspace-2)
(define-second-key ("quotedbl" :mod-1) 'b-second-focus-workspace-3)
(define-second-key ("quoteright" :mod-1) 'b-second-focus-workspace-4)
(define-second-key ("parenleft" :mod-1) 'b-second-focus-workspace-5)
(define-second-key ("minus" :mod-1) 'b-second-focus-workspace-6)
(define-second-key ("egrave" :mod-1) 'b-second-focus-workspace-7)
(define-second-key ("underscore" :mod-1) 'b-second-focus-workspace-8)
(define-second-key ("ccedilla" :mod-1) 'b-second-focus-workspace-9)
(define-second-key ("agrave" :mod-1) 'b-second-focus-workspace-10)

(define-second-key ("ampersand" :control :mod-1) 'renumber-workspaces)
(define-second-key ("eacute" :control :mod-1) 'sort-workspaces)


(define-second-key ("twosuperior") 'banish-pointer)
(define-second-key ("twosuperior" :mod-1) 'toggle-maximize-current-group)

(define-second-key (#\t) 'tile-current-workspace-vertically)
(define-second-key (#\t :shift) 'tile-current-workspace-horizontally)


;; Pager mode
(undefine-pager-multi-keys (#\b)
			   (#\1 :mod-1) (#\2 :mod-1) (#\3 :mod-1)
			   (#\4 :mod-1) (#\5 :mod-1) (#\6 :mod-1)
			   (#\7 :mod-1) (#\8 :mod-1) (#\9 :mod-1) (#\0 :mod-1)
			   (#\1 :control :mod-1) (#\2 :control :mod-1))

(define-pager-key ("twosuperior") 'banish-pointer)

(define-pager-key ("ampersand" :mod-1) 'b-pager-focus-workspace-1)
(define-pager-key ("eacute" :mod-1) 'b-pager-focus-workspace-2)
(define-pager-key ("quotedbl" :mod-1) 'b-pager-focus-workspace-3)
(define-pager-key ("quoteright" :mod-1) 'b-pager-focus-workspace-4)
(define-pager-key ("parenleft" :mod-1) 'b-pager-focus-workspace-5)
(define-pager-key ("minus" :mod-1) 'b-pager-focus-workspace-6)
(define-pager-key ("egrave" :mod-1) 'b-pager-focus-workspace-7)
(define-pager-key ("underscore" :mod-1) 'b-pager-focus-workspace-8)
(define-pager-key ("ccedilla" :mod-1) 'b-pager-focus-workspace-9)
(define-pager-key ("agrave" :mod-1) 'b-pager-focus-workspace-10)

(define-pager-key ("ampersand" :control :mod-1) 'pager-renumber-workspaces)
(define-pager-key ("eacute" :control :mod-1) 'pager-sort-workspaces)

;;; -- Azerty configuration end --



